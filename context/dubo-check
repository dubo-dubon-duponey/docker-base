#!/usr/bin/env bash
set -o errexit -o errtrace -o functrace -o nounset -o pipefail

readonly CHECKLIST=(BIND_NOW PIE STACK_PROTECTED STACK_CLASH FORTIFIED RO_RELOCATIONS STATIC RUNNING NO_SYSTEM_LINK)
com="$1"
binary="$2"
shift
shift

readonly HARDENING_CHECK="$(hardening-check "$binary" 2>/dev/null || true)"
readonly READELF="$(readelf -d "$binary")"
readonly DYN="$(readelf -p .interp "$binary" 2>/dev/null)"
# ldd is ridiculously buggy
readonly LDDL="$(ldd "$binary" 2>/dev/null | grep -v " => /lib/" || true)"
# ldd is ridiculously buggy
readonly LDDB="$(readelf -d "$binary" | grep NEEDED || true)"

validate(){
  local binary="$1"
  local passed=()
  local failed=()
  local ignored=()
  local check
  for check in "${CHECKLIST[@]}"; do
    [ "${!check:-}" == true ] || { ignored+=("$check"); continue; }
    case "$check" in
      "BIND_NOW")
        printf "%s" "$READELF" | grep -q "BIND_NOW" && passed+=("$check") || failed+=("$check")
      ;;
      "PIE")
        printf "%s" "$READELF" | grep -q "PIE" && passed+=("$check") || failed+=("$check")
      ;;
      "STACK_PROTECTED")
        printf "%s" "$HARDENING_CHECK" | grep "Stack protected" | grep -q yes  && passed+=("$check") || failed+=("$check")
      ;;
      "STACK_CLASH")
        printf "%s" "$HARDENING_CHECK" | grep "Stack clash protection" | grep -q yes  && passed+=("$check") || failed+=("$check")
      ;;
      "FORTIFIED")
        printf "%s" "$HARDENING_CHECK" | grep "Fortify Source functions" | grep -q yes && passed+=("$check") || failed+=("$check")
      ;;
      "RO_RELOCATIONS")
        printf "%s" "$HARDENING_CHECK" | grep "Read-only relocations" | grep -q yes && passed+=("$check") || failed+=("$check")
      ;;
      "STATIC")
        [ ! "$(printf "%s" "$DYN")" ] && passed+=("$check") || failed+=("$check")
      ;;
      "RUNNING")
        "$binary" "--version" >/dev/null 2>&1 || "$binary" version >/dev/null 2>&1  && passed+=("$check") || {
          failed+=("$check")
          >&2 printf "FAILING TO RUN BINARY. This is usually quite bad. Output was:\n"
          >&2 "$binary" "--version" || true
        }
      ;;
      "NO_SYSTEM_LINK")
        [ ! "${STATIC:-}" ] || { ignored+=("$check"); continue; }
        local faillink=
        while read -r line; do
          [ "$line" ] || continue
          printf "%s" "$line" | grep -q /dist || { faillink=true; failed+=("$check ($line)"); }
        done <<<"$(printf "%s" "$LDDL" | grep "=>")"
        [ "$faillink" ] || passed+=("$check")
      ;;
    esac
  done
  printf "***************************************\n"
  printf "Binary report for %s\n" "$binary"
  printf "***************************************\n"
  tput setaf 3
  printf "Ignored checks: %s" "${ignored[*]}"
  tput op
  printf "\n"
  tput setaf 2
  printf "Successfull checks: %s" "${passed[*]}"
  tput op
  printf "\n"
  tput setaf 1
  printf "Failed tests: %s" "${failed[*]}"
  tput op
  printf "\n"
  printf "Linked: %s\n" "$LDDB"
  [ ! "${failed[*]}" ] || return 1
}

case "$com" in
  "")
  ;;
  *)
    validate "$binary"
  ;;
esac
