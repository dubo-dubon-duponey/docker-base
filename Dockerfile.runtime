ARG           FROM_REGISTRY=docker.io/dubodubonduponey
ARG           FROM_IMAGE_RUNTIME=debian:bookworm-2024-03-01
ARG           FROM_IMAGE_BUILDER=debian:bookworm-2024-03-01

#######################
# Overlay
# This image is meant to provide basic files copied over directly into the base target image.
# Right now:
# - ca-certificates: originally due to a bug in qemu / libc installing ca-certificates would fail 32bits systems, which prompted this deviation
# The problem may (?) be fixed now in qemu6, although ca-certificates do install libssl and openssl, which is undesirable.
# By installing out of band, on the native arch, and copying the files, we get to install trusted roots without the hassle of shipping openssl
#######################
FROM          $FROM_REGISTRY/$FROM_IMAGE_BUILDER                                                                        AS overlay-builder

ARG           BUILD_CREATED="1976-04-14T17:00:00-07:00"

RUN           --mount=type=secret,uid=100,id=CA \
              --mount=type=secret,uid=100,id=CERTIFICATE \
              --mount=type=secret,uid=100,id=KEY \
              --mount=type=secret,uid=100,id=GPG.gpg \
              --mount=type=secret,id=NETRC \
              --mount=type=secret,id=APT_SOURCES \
              --mount=type=secret,id=APT_CONFIG \
              apt-get update -qq; \
              apt-get install -qq --no-install-recommends \
                ca-certificates=20230311

RUN           update-ca-certificates

RUN           epoch="$(date --date "$BUILD_CREATED" +%s)"; \
              find /etc/ssl/certs -newermt "@$epoch" -exec touch --no-dereference --date="@$epoch" '{}' +; \
              find /usr/share/ca-certificates -newermt "@$epoch" -exec touch --no-dereference --date="@$epoch" '{}' +

RUN           tar -cf /overlay.tar /etc/ssl/certs /usr/share/ca-certificates

########################################################################################################################
# Export of the above
########################################################################################################################
FROM          scratch                                                                                                   AS overlay
# hadolint ignore=DL3010
COPY          --from=overlay-builder /overlay.tar /overlay.tar

#######################
# Runtime base
# Base image for all runtime environments.
# Provides at build time:
# - automatic user creation
# - automatic copy of "runtime" folder
# - automatic permission setting on said files
# - anything useful from the builder-generic image
# - automatic entrypoint definition and user setting
#######################
FROM          $FROM_REGISTRY/$FROM_IMAGE_RUNTIME                                                                        AS runtime

RUN           --mount=type=secret,uid=100,id=CA \
              --mount=type=secret,uid=100,id=CERTIFICATE \
              --mount=type=secret,uid=100,id=KEY \
              --mount=type=secret,uid=100,id=GPG.gpg \
              --mount=type=secret,id=NETRC \
              --mount=type=secret,id=APT_SOURCES \
              --mount=type=secret,id=APT_CONFIG \
              apt-get update -qq && \
              apt-get install -qq --no-install-recommends bash-static=5.2.15-2+b2 && \
              mkdir -p /boot/bin && \
              cp /bin/bash-static /boot/bin/bash && \
              apt-get -qq purge bash-static && \
              apt-get -qq autoremove      && \
              apt-get -qq clean           && \
              rm -rf /var/lib/apt/lists/* && \
              rm -rf /tmp/*               && \
              rm -rf /var/tmp/*

# We use this to set mtime on newly created folders
ARG           BUILD_CREATED="1976-04-14T17:00:00-07:00"

# We store binaries in /boot/bin
ENV           PATH=/boot/bin:$PATH

# Allows one to pick a specific UID for the user, at build time
ONBUILD ARG   BUILD_UID=2000

# Metadata
ONBUILD ARG   BUILD_CREATED="1976-04-14T17:00:00-07:00"
ONBUILD ARG   BUILD_URL="https://github.com/dubo-dubon-duponey/nonexistent"
ONBUILD ARG   BUILD_DOCUMENTATION="https://github.com/dubo-dubon-duponey/nonexistent"
ONBUILD ARG   BUILD_SOURCE="https://github.com/dubo-dubon-duponey/nonexistent"
ONBUILD ARG   BUILD_VERSION="unknown"
ONBUILD ARG   BUILD_REVISION="unknown"
ONBUILD ARG   BUILD_VENDOR="dubodubonduponey"
ONBUILD ARG   BUILD_LICENSES="MIT"
ONBUILD ARG   BUILD_REF_NAME="dubodubonduponey/nonexistent"
ONBUILD ARG   BUILD_TITLE="A DBDBDP image"
ONBUILD ARG   BUILD_DESCRIPTION="So image. Much DBDBDP. Such description."

ONBUILD LABEL org.opencontainers.image.created="$BUILD_CREATED"
ONBUILD LABEL org.opencontainers.image.authors="Dubo Dubon Duponey <dubo-dubon-duponey@farcloser.world>"
ONBUILD LABEL org.opencontainers.image.url="$BUILD_URL"
ONBUILD LABEL org.opencontainers.image.documentation="$BUILD_DOCUMENTATION"
ONBUILD LABEL org.opencontainers.image.source="$BUILD_SOURCE"
ONBUILD LABEL org.opencontainers.image.version="$BUILD_VERSION"
ONBUILD LABEL org.opencontainers.image.revision="$BUILD_REVISION"
ONBUILD LABEL org.opencontainers.image.vendor="$BUILD_VENDOR"
ONBUILD LABEL org.opencontainers.image.licenses="$BUILD_LICENSES"
ONBUILD LABEL org.opencontainers.image.ref.name="$BUILD_REF_NAME"
ONBUILD LABEL org.opencontainers.image.title="$BUILD_TITLE"
ONBUILD LABEL org.opencontainers.image.description="$BUILD_DESCRIPTION"

# XXX The usefulness/security angle of this should be assessed.
ADD           ./cache/overlay.tar /

# Set a restrictive umask by default
RUN           echo "umask 0700" > /etc/profile.d/dbdbdp; \
              epoch="$(date --date "$BUILD_CREATED" +%s)"; \
              touch --no-dereference --date="@$epoch" /etc/profile.d/dbdbdp

# Create a restricted user account (no shell, no home, disabled), and add our folders
RUN           adduser --system --no-create-home --home /nonexistent --gecos "in dockerfile user" \
                --uid 2000 \
                dubo-dubon-duponey; \
              mkdir -p /boot; \
              mkdir -p /config; \
              mkdir -p /data; \
              mkdir -p /certs; \
              chown -R 2000:root /boot; \
              chown -R 2000:root /config; \
              chown -R 2000:root /data; \
              chown -R 2000:root /certs; \
              epoch="$(date --date "$BUILD_CREATED" +%s)"; \
              touch --no-dereference --date="@$epoch" /boot; \
              touch --no-dereference --date="@$epoch" /config; \
              touch --no-dereference --date="@$epoch" /data; \
              touch --no-dereference --date="@$epoch" /certs;

# Fix timestamp on files altered by user creation and ca-certificates to fix reproducibility
# NOTE: this is somewhat problematic. BUILD_CREATED could be older than the Debian image it is using.
# Burden is on the maintainer to avoid that
RUN           epoch="$(date --date "$BUILD_CREATED" +%s)"; \
              touch --no-dereference --date="@$epoch" /etc/shadow; \
              touch --no-dereference --date="@$epoch" /etc/shadow-; \
              touch --no-dereference --date="@$epoch" /etc/passwd; \
              touch --no-dereference --date="@$epoch" /etc/passwd-; \
              touch --no-dereference --date="@$epoch" /etc/subuid; \
              touch --no-dereference --date="@$epoch" /etc/subgid

# Get all relevant files at build time, from a "runtime" folder under context
ONBUILD COPY  --chown=$BUILD_UID:root runtime  /

# Setup directories and permissions
# The user can access the files as the owner, and root can access as the group (that way, --user root still works without caps).
# Write is granted, although that doesn't really matter in term of security
ONBUILD RUN   [ "$BUILD_UID" == "2000" ] || { \
                usermod -u "$BUILD_UID" dubo-dubon-duponey; \
                chown -R $BUILD_UID:root /boot; \
                chown -R $BUILD_UID:root /config; \
                chown -R $BUILD_UID:root /data; \
                chown -R $BUILD_UID:root /certs; \
              }; \
              find /boot   -type d -exec chmod -R 550 {} +; \
              find /config -type d -exec chmod -R 550 {} +; \
              find /data   -type d -exec chmod -R 770 {} +; \
              find /certs  -type d -exec chmod -R 770 {} +; \
              find /boot   -type f -exec chmod -R 550 {} +; \
              find /config -type f -exec chmod -R 440 {} +; \
              find /data   -type f -exec chmod -R 660 {} +; \
              find /certs  -type f -exec chmod -R 660 {} +; \
              epoch="$(date --date "$BUILD_CREATED" +%s)"; \
              find /boot -newermt "@$epoch" -exec touch --no-dereference --date="@$epoch" '{}' +; \
              find /config -newermt "@$epoch" -exec touch --no-dereference --date="@$epoch" '{}' +; \
              find /data -newermt "@$epoch" -exec touch --no-dereference --date="@$epoch" '{}' +; \
              find /certs -newermt "@$epoch" -exec touch --no-dereference --date="@$epoch" '{}' +

# Finally downgrade to system user
ONBUILD USER  dubo-dubon-duponey

# Disable weak cryptography in GNUTLS
ENV           GNUTLS_FORCE_FIPS_MODE=1

# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
ENV           XDG_DATA_HOME=/data
ENV           XDG_DATA_DIRS=/data
ENV           XDG_CONFIG_HOME=/tmp/config
ENV           XDG_CONFIG_DIRS=/config
ENV           XDG_RUNTIME_DIR=/tmp/runtime
ENV           XDG_STATE_HOME=/tmp/state
ENV           XDG_CACHE_HOME=/tmp/cache

ENTRYPOINT    ["/boot/entrypoint.sh"]
