ARG           FROM_REGISTRY=docker.io/dubodubonduponey
ARG           FROM_IMAGE_RUNTIME=debian:bookworm-2024-03-01
ARG           FROM_IMAGE_BUILDER=debian:bookworm-2024-03-01

#######################
# Overlay
# This image is meant to provide basic files copied over directly into the base target image.
# Right now:
# - ca-certificates: originally due to a bug in qemu / libc installing ca-certificates would fail 32bits systems, which prompted this deviation
# The problem may (?) be fixed now in qemu6, although ca-certificates do install libssl and openssl, which is undesirable.
# By installing out of band, on the native arch, and copying the files, we get to install trusted roots without the hassle of shipping openssl
#######################
FROM          $FROM_REGISTRY/$FROM_IMAGE_BUILDER                                                                        AS overlay-builder

ARG           BUILD_CREATED="1976-04-14T17:00:00-07:00"

RUN           --mount=type=secret,uid=100,id=CA \
              --mount=type=secret,uid=100,id=CERTIFICATE \
              --mount=type=secret,uid=100,id=KEY \
              --mount=type=secret,uid=100,id=GPG.gpg \
              --mount=type=secret,id=NETRC \
              --mount=type=secret,id=APT_SOURCES \
              --mount=type=secret,id=APT_CONFIG \
              apt-get update -qq; \
              apt-get install -qq --no-install-recommends \
                ca-certificates=20230311

RUN           update-ca-certificates

RUN           epoch="$(date --date "$BUILD_CREATED" +%s)"; \
              find /etc/ssl/certs -newermt "@$epoch" -exec touch --no-dereference --date="@$epoch" '{}' +; \
              find /usr/share/ca-certificates -newermt "@$epoch" -exec touch --no-dereference --date="@$epoch" '{}' +

RUN           tar -cf /overlay.tar /etc/ssl/certs /usr/share/ca-certificates

########################################################################################################################
# Export of the above
########################################################################################################################
FROM          scratch                                                                                                   AS overlay
# hadolint ignore=DL3010
COPY          --from=overlay-builder /overlay.tar /overlay.tar

#######################
# Runtime base
# Base image for all runtime environments.
# Provides at build time:
# - automatic user creation
# - automatic copy of "runtime" folder
# - automatic permission setting on said files
# - anything useful from the builder-generic image
# - automatic entrypoint definition and user setting
#######################
FROM          $FROM_REGISTRY/$FROM_IMAGE_RUNTIME                                                                        AS runtime

RUN           --mount=type=secret,uid=100,id=CA \
              --mount=type=secret,uid=100,id=CERTIFICATE \
              --mount=type=secret,uid=100,id=KEY \
              --mount=type=secret,uid=100,id=GPG.gpg \
              --mount=type=secret,id=NETRC \
              --mount=type=secret,id=APT_SOURCES \
              --mount=type=secret,id=APT_CONFIG \
              apt-get update -qq && \
              apt-get install -qq --no-install-recommends bash-static=5.2.15-2+b2 && \
              mkdir -p /boot/bin && \
              cp /bin/bash-static /boot/bin/bash && \
              apt-get -qq purge bash-static && \
              apt-get -qq autoremove      && \
              apt-get -qq clean           && \
              rm -rf /var/lib/apt/lists/* && \
              rm -rf /tmp/*               && \
              rm -rf /var/tmp/*

# We use this to set mtime on newly created folders
ARG           BUILD_CREATED="1976-04-14T17:00:00-07:00"

# We store binaries in /boot/bin
ENV           PATH=/boot/bin:$PATH

# Allows one to pick a specific UID for the user, at build time
ONBUILD ARG   BUILD_UID=2000

# Metadata
ONBUILD ARG   BUILD_CREATED="1976-04-14T17:00:00-07:00"
ONBUILD ARG   BUILD_URL="https://github.com/dubo-dubon-duponey/nonexistent"
ONBUILD ARG   BUILD_DOCUMENTATION="https://github.com/dubo-dubon-duponey/nonexistent"
ONBUILD ARG   BUILD_SOURCE="https://github.com/dubo-dubon-duponey/nonexistent"
ONBUILD ARG   BUILD_VERSION="unknown"
ONBUILD ARG   BUILD_REVISION="unknown"
ONBUILD ARG   BUILD_VENDOR="dubodubonduponey"
ONBUILD ARG   BUILD_LICENSES="MIT"
ONBUILD ARG   BUILD_REF_NAME="dubodubonduponey/nonexistent"
ONBUILD ARG   BUILD_TITLE="A DBDBDP image"
ONBUILD ARG   BUILD_DESCRIPTION="So image. Much DBDBDP. Such description."

ONBUILD LABEL org.opencontainers.image.created="$BUILD_CREATED"
ONBUILD LABEL org.opencontainers.image.authors="Dubo Dubon Duponey <dubo-dubon-duponey@farcloser.world>"
ONBUILD LABEL org.opencontainers.image.url="$BUILD_URL"
ONBUILD LABEL org.opencontainers.image.documentation="$BUILD_DOCUMENTATION"
ONBUILD LABEL org.opencontainers.image.source="$BUILD_SOURCE"
ONBUILD LABEL org.opencontainers.image.version="$BUILD_VERSION"
ONBUILD LABEL org.opencontainers.image.revision="$BUILD_REVISION"
ONBUILD LABEL org.opencontainers.image.vendor="$BUILD_VENDOR"
ONBUILD LABEL org.opencontainers.image.licenses="$BUILD_LICENSES"
ONBUILD LABEL org.opencontainers.image.ref.name="$BUILD_REF_NAME"
ONBUILD LABEL org.opencontainers.image.title="$BUILD_TITLE"
ONBUILD LABEL org.opencontainers.image.description="$BUILD_DESCRIPTION"

# XXX The usefulness/security angle of this should be assessed.
ADD           ./cache/overlay.tar /

# Set a restrictive umask by default
RUN           echo "umask 0700" > /etc/profile.d/dbdbdp; \
              epoch="$(date --date "$BUILD_CREATED" +%s)"; \
              touch --no-dereference --date="@$epoch" /etc/profile.d/dbdbdp

################################## https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html

#### Primary, typically read-write

## Main user data location (meant to be modified, persistent)

# $XDG_DATA_HOME defines the base directory relative to which user-specific data files should be stored.
# If $XDG_DATA_HOME is either not set or empty, a default equal to $HOME/.local/share should be used.
ENV           XDG_DATA_HOME=/data

## Main user configuration location (meant to be modified, transient)

# $XDG_CONFIG_HOME defines the base directory relative to which user-specific configuration files should be stored.
# If $XDG_CONFIG_HOME is either not set or empty, a default equal to $HOME/.config should be used.
ENV           XDG_CONFIG_HOME=/tmp/config

## Main user state location (meant to be modified, transient)

# $XDG_STATE_HOME defines the base directory relative to which user-specific state files should be stored.
# If $XDG_STATE_HOME is either not set or empty, a default equal to $HOME/.local/state should be used.
# The $XDG_STATE_HOME contains state data that should persist between (application) restarts,
# but that is not important or portable enough to the user that it should be stored in $XDG_DATA_HOME. It may contain:
# actions history (logs, history, recently used files, …)
# current state of the application that can be reused on a restart (view, layout, open files, undo history, …)
ENV           XDG_STATE_HOME=/tmp/state

## Main user cache location (meant to be modified, transient)

# $XDG_CACHE_HOME defines the base directory relative to which user-specific non-essential data files should be stored.
# If $XDG_CACHE_HOME is either not set or empty, a default equal to $HOME/.cache should be used.
ENV           XDG_CACHE_HOME=/tmp/cache

## Main user runtime location (meant to be modified, session bound)

# $XDG_RUNTIME_DIR defines the base directory relative to which user-specific non-essential runtime files and other file objects (such as sockets, named pipes, ...) should be stored.
# The directory MUST be owned by the user, and he MUST be the only one having read and write access to it. Its Unix access mode MUST be 0700.
ENV           XDG_RUNTIME_DIR=/tmp/runtime

#### Secondary, typically read-only

## Main data location (fixed, persistent)

# $XDG_DATA_DIRS defines the preference-ordered set of base directories to search for data files in addition to the $XDG_DATA_HOME base directory.
# The directories in $XDG_DATA_DIRS should be seperated with a colon ':'.
# If $XDG_DATA_DIRS is either not set or empty, a value equal to /usr/local/share/:/usr/share/ should be used.
ENV           XDG_DATA_DIRS=/data

## Main config location (fixed, persistent)

# $XDG_CONFIG_DIRS defines the preference-ordered set of base directories to search for configuration files in addition to the $XDG_CONFIG_HOME base directory.
# The directories in $XDG_CONFIG_DIRS should be seperated with a colon ':'.
# If $XDG_CONFIG_DIRS is either not set or empty, a value equal to /etc/xdg should be used.
ENV           XDG_CONFIG_DIRS=/config

# Create a restricted user account (no shell, no home, disabled), and add our folders
RUN           adduser --system --no-create-home --home /nonexistent --gecos "in dockerfile user" \
                --uid 2000 \
                dubo-dubon-duponey; \
              epoch="$(date --date "$BUILD_CREATED" +%s)"; \
              for i in /boot /certs \
                  "$XDG_DATA_HOME" "$XDG_CONFIG_HOME" "$XDG_STATE_HOME" "$XDG_CACHE_HOME" \
                  "$XDG_RUNTIME_DIR" "$XDG_DATA_DIRS" "$XDG_CONFIG_DIRS"; do \
                mkdir -p "$i"; \
                chown -R 2000:root "$i"; \
                touch --no-dereference --date="@$epoch" "$i"; \
              done

# Fix timestamp on files altered by user creation and ca-certificates to fix reproducibility
# NOTE: this is somewhat problematic. BUILD_CREATED could be older than the Debian image it is using.
# Burden is on the maintainer to avoid that
RUN           epoch="$(date --date "$BUILD_CREATED" +%s)"; \
              touch --no-dereference --date="@$epoch" /etc/shadow; \
              touch --no-dereference --date="@$epoch" /etc/shadow-; \
              touch --no-dereference --date="@$epoch" /etc/passwd; \
              touch --no-dereference --date="@$epoch" /etc/passwd-; \
              touch --no-dereference --date="@$epoch" /etc/subuid; \
              touch --no-dereference --date="@$epoch" /etc/subgid

# Get all relevant files at build time, from a "runtime" folder under context
ONBUILD COPY  --chown=$BUILD_UID:root runtime  /

# Setup directories and permissions
# The user can access the files as the owner, and root can access as the group (that way, --user root still works without caps).
# Write is granted, although that doesn't really matter in term of security
ONBUILD RUN   [ "$BUILD_UID" == "2000" ] || { \
                usermod -u "$BUILD_UID" dubo-dubon-duponey; \
                chown -R $BUILD_UID:root /boot; \
                chown -R $BUILD_UID:root /config; \
                chown -R $BUILD_UID:root /data; \
                chown -R $BUILD_UID:root /certs; \
              }; \
              find /boot   -type d -exec chmod -R 550 {} +; \
              find /config -type d -exec chmod -R 550 {} +; \
              find /data   -type d -exec chmod -R 770 {} +; \
              find /certs  -type d -exec chmod -R 770 {} +; \
              find /boot   -type f -exec chmod -R 550 {} +; \
              find /config -type f -exec chmod -R 440 {} +; \
              find /data   -type f -exec chmod -R 660 {} +; \
              find /certs  -type f -exec chmod -R 660 {} +; \
              epoch="$(date --date "$BUILD_CREATED" +%s)"; \
              find /boot -newermt "@$epoch" -exec touch --no-dereference --date="@$epoch" '{}' +; \
              find /config -newermt "@$epoch" -exec touch --no-dereference --date="@$epoch" '{}' +; \
              find /data -newermt "@$epoch" -exec touch --no-dereference --date="@$epoch" '{}' +; \
              find /certs -newermt "@$epoch" -exec touch --no-dereference --date="@$epoch" '{}' +

# Finally downgrade to system user
ONBUILD USER  dubo-dubon-duponey

# Disable weak cryptography in GNUTLS
ENV           GNUTLS_FORCE_FIPS_MODE=1

ENTRYPOINT    ["/boot/entrypoint.sh"]
